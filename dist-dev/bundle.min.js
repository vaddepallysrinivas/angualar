(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var angular = require('angular');

function decorators($provide) {
    $provide.decorator('$exceptionHandler', ['$injector', '$delegate', function($injector, $delegate) {
        return function(exception, cause) {
            $delegate(exception, cause);
            var errorData = {exception: exception, cause: cause};
            var common = $injector.get('commonService');
            common.broadcastErrorDialogEvent(errorData);
        };
    }]);
    $provide.decorator('$q', ['$delegate', function($delegate) {
        function seqAll(promises) {
            var deferred = $delegate.defer();
            var results = [];
            var j = 0;
            function recursive(promise) {
                j++;
                promise.then(function(data){
                    results.push(data);
                    if (j < promises.length) {
                        recursive(promises[j]);
                    } else {
                        deferred.resolve(results);
                    }
                }, function(error) {
                    //todo: Error data need to be made generic
                    deferred.reject('promises[' + (j - 1) + ']' + ' rejected with status: ' + error.status);
                    return;
                });
            }
            recursive(promises[j]);
            return deferred.promise;
        }
        $delegate.seqAll = seqAll;
        return $delegate;
    }]);
    
    $provide.decorator('$log', ['$delegate', function($delegate){
        
        var enhanceLogger = function ($log) {
            var _$log = (function ($log) {
                return {
                    log: $log.log,
                    info: $log.info,
                    warn: $log.warn,
                    debug: $log.debug,
                    error: $log.error
                };
            })($log);

            var prepareLogFn = function (logFn, className) {
                className = className || 'Logger: ';
                var enhancedLogFn = function () {
                    try {
                        var args = Array.prototype.slice.call(arguments);   
                        args[0] = [className, args[0]].join('');
                        logFn.apply(null, args);
                    }
                    catch(error) {
                        $log.error('LogEnhancer ERROR: ' + error);
                    }

                };
                enhancedLogFn.logs = [];
                return enhancedLogFn;
            };

            var getInstance = function (className) {
                className = (className !== undefined) ? className + ': ' : 'Logger: ';
                var instance = {
                    log: prepareLogFn(_$log.log, className),
                    info: prepareLogFn(_$log.info, className),
                    warn: prepareLogFn(_$log.warn, className),
                    debug: prepareLogFn(_$log.debug, className),
                    error: prepareLogFn(_$log.error, className) 
                };

                if(angular.isDefined(angular.makeTryCatch)) {
                    // Attach instance specific tryCatch() functionality...
                    instance.tryCatch = angular.makeTryCatch(instance.error, instance);
                }

                return instance;
            };

            $log.getInstance = getInstance;

            return $log;
        };

        return enhanceLogger($delegate);
    }]);
}

decorators.$inject = ['$provide'];

module.exports = decorators;
},{"angular":undefined}],2:[function(require,module,exports){
'use strict';

var config = require('./app.values');

function commonConfig(commonConfigProvider) {
    commonConfigProvider.config.spinnerToggleEvent = config.events.spinnerToggle;
    commonConfigProvider.config.showErrorDialogEvent = config.events.showErrorDialog;
    commonConfigProvider.config.activateParentControllerEvent = config.events.activateParentController;
    commonConfigProvider.config.activateControllerEvent = config.events.activateController;
    commonConfigProvider.config.activateControllerFailedEvent = config.events.activateControllerFailed;
}

commonConfig.$inject = ['commonConfigProvider'];

module.exports = commonConfig;
},{"./app.values":6}],3:[function(require,module,exports){
'use strict';

var requestInterceptor = ['$q', '$injector', '$location', '$rootScope', '$timeout',
    function($q, /*jshint unused:false*/$injector, $location, $rootScope, $timeout) {
        var numOfRequests = 0;
        var hide = function() {
            numOfRequests--;
            if (numOfRequests <= 0) {
                $rootScope.$emit('spinner.toggle', {show: false});
            }
        };
        var show = function () {
            numOfRequests++;
            if (numOfRequests > 0) {
                $rootScope.$emit('spinner.toggle', {show: true, background: false});
            }
        };
        if(numOfRequests === 0) {
            $rootScope.$emit('spinner.toggle', {show: false});
        }
        var interceptorInstance = {
            request: function (config) {
                var commonService = $injector.get('commonService');
                commonService.$log.getInstance().debug('[' + config.method + '] -> '+ config.url);
                show();
                return config || $q.when(config);
            },
            response: function (response) {
                hide();
                if(response.config.method === 'POST' && response.status > 200 && response.status <= 210) {
                    var toastr = $injector.get('toastr');
                    toastr.success('Data Saved Successfully !', 'Success', {timeOut:2000});
                }
                return response || $q.when(response);
            },
            responseError: function (rejection) {
                hide();
                $rootScope.$emit('spinner.toggle', {show: false});
                var commonService = $injector.get('commonService');
                if(rejection.config.method === 'POST') {
                    var toastr = $injector.get('toastr');
                    var message = '<p>Unable to save data successfully.<br/>Please contact support team immediately!</p>';
                    toastr.error(message, 'Data Error', {timeOut: 0, allowHtml:true});
                }
                var error = rejection.data || {};
                error = error.error || {};
                commonService.$log.getInstance().debug(error.message);
                return $q.reject(error);
            }
        };
        return interceptorInstance;
    }
];


function httpInterceptor($httpProvider) {
    $httpProvider.interceptors.push(requestInterceptor);
    // $httpProvider.defaults.cache = false;
    
}

httpInterceptor.$inject = ['$httpProvider'];



module.exports = httpInterceptor;
},{}],4:[function(require,module,exports){
'use strict';

var angular = require('angular');
require('angular-animate');
require('angular-touch');
require('angular-ui-bootstrap');
require('angular-ui-router');
require('angular-ui-grid');


//Modules
require('./common/module');
require('./home/module');


  angular.module('lms', [
		//3rd - party
		'ngAnimate',
		'ngTouch',
		'ui.bootstrap',
		'ui.router',
		'ui.grid',
		'ui.grid.resizeColumns',
		'ui.grid.autoResize',
		'ui.grid.edit',
		'ui.grid.autoResize',
		'ui.grid.selection',
		'ui.grid.pagination',


		//Modules
		'common',
		'home',
		//'admin',
		//'training',
		//'ptid',
		//'reports'
		])
  .value('config', require('./app.values'))
  .config(require('./app.routing'))
  .config(require('./app.decorators'))
  .config(require('./app.interceptors'))
  .config(require('./app.events.config'))
  .config(['$compileProvider', '$logProvider', function($compileProvider, $logProvider) {
  	$compileProvider.debugInfoEnabled(false);
			/*
				Always $logProvider.debugEnabled(false) - This will not show any log statements in production.
			*/
			$logProvider.debugEnabled(true);
		}]).
  config(['$httpProvider', function($httpProvider) {
	    //initialize get if not there

	    // $httpProvider.defaults.cache = false;
	    if (!$httpProvider.defaults.headers.get) {
	        $httpProvider.defaults.headers.get = {};    
	    }    
	    //disable IE ajax request caching
	    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
	    // extra
	    $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
	    /*jshint sub:true*/
	    $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';
  
	    if (!$httpProvider.defaults.headers.post) {
	        $httpProvider.defaults.headers.post = {};    
	    }    

	    $httpProvider.defaults.headers.post['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
        
	    $httpProvider.defaults.headers.post['Cache-Control'] = 'no-cache';
	    /*jshint sub:true*/
	    $httpProvider.defaults.headers.post['Pragma'] = 'no-cache';
	}]);
  //.factory('dataCache', require('./app.cache'))
  //.constant('AppConstants', require('./app.constants'))
  


},{"./app.decorators":1,"./app.events.config":2,"./app.interceptors":3,"./app.routing":5,"./app.values":6,"./common/module":10,"./home/module":17,"angular":undefined,"angular-animate":undefined,"angular-touch":undefined,"angular-ui-bootstrap":undefined,"angular-ui-grid":undefined,"angular-ui-router":undefined}],5:[function(require,module,exports){
'use strict';
var angular = require('angular');

function routing($stateProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise('/login');
    $stateProvider
    .state('login', {
        url: '/login',
        templateUrl: 'src/home/templates/login.html',
        title: 'login'
    });
}

routing.$inject=['$stateProvider', '$urlRouterProvider'];

module.exports = routing;
},{"angular":undefined}],6:[function(require,module,exports){
'use strict';

var events = {
    showErrorDialog: 'error.dialog',
    spinnerToggle: 'spinner.toggle',
    activateParentController: 'activate.parent.controller',
    activateController: 'activate.controller',
    activateControllerFailed: 'activate.controller.failed'
};

var config = {
    events: events
};

module.exports = config;
},{}],7:[function(require,module,exports){
'use strict';

function alertDialogController($uibModalInstance, params) {

	/*jshint validthis:true*/
	var alertCtrl = this;
	
	alertCtrl.title = params.title || 'Alert';
	alertCtrl.message = params.message || 'Please Confirm !!';
	alertCtrl.okTitle = params.okTitle || 'OK';
	
	alertCtrl.ok = function () {
        $uibModalInstance.close();
    };

    alertCtrl.no = function () {
        $uibModalInstance.dismiss('cancel');
    };
}

alertDialogController.$inject = ['$uibModalInstance', 'params'];

module.exports = alertDialogController;
},{}],8:[function(require,module,exports){
'use strict';

var angular = require('angular');

function commonService($rootScope, $q, $window, commonConfig, $timeout, $interval, $location, $uibModal, $log, $http, uiGridConstants) {

    var apiBaseUrl = '';
    var baseUrl = apiBaseUrl + '/epm/newipm/sep/api';

    function $broadcast() {
        return $rootScope.$broadcast.apply($rootScope, arguments);
    }

    function broadcastErrorDialogEvent(error) {
        $broadcast(commonConfig.config.showErrorDialogEvent, error);
    }
    
    function activateParentController(requests, controllerId) {
        return $q.all(requests).then(function (/* jshint unused:false */ result) {
            var data = {controllerId: controllerId};
            $broadcast(commonConfig.config.activateParentControllerEvent, data);
        }, function(error){
           
        });
    }
    
    function activateController(requests, controllerId) {
        var deferred = $q.defer();
        $q.all(requests).then(function (/* jshint unused:false */ eventArgs) {
            var data = {controllerId: controllerId};
            $broadcast(commonConfig.config.activateControllerEvent, data);
            deferred.resolve(eventArgs);
        }).catch(function (reason) {
            $broadcast(commonConfig.config.activateControllerFailedEvent, reason);
            deferred.reject(reason);
        });
        return deferred.promise;
    }

    function yesNoDialog(title, message, yesCallback, noCallback, yesTitle, noTitle) {
        var modalInstance = $uibModal.open({
            templateUrl: 'src/common/templates/yes-no-dialog.html',
            controller: 'YesNoDialogController',
            controllerAs:'yesNoCtrl',
            resolve: {
                params: function() {
                    return { 
                        title: title, 
                        message: message,
                        yesTitle: yesTitle,
                        noTitle: noTitle
                    };
                }
            }
        });

        modalInstance.result.then(function() {
            yesCallback();
        }, function() {
            noCallback();
        });
    }

    function alertDialog(title, message, okCallback, okTitle) {
        var modalInstance = $uibModal.open({
            templateUrl: 'src/common/templates/alert-dialog.html',
            controller: 'AlertDialogController',
            controllerAs:'alertCtrl',
            resolve: {
                params: function() {
                    return { 
                        title: title, 
                        message: message,
                        okTitle: okTitle
                    };
                }
            }
        });
        modalInstance.result.then(function() {
            if(okCallback){
                okCallback();
            }
        }, function() {

        });
    }

    function httpDialog(isSuccess, message) {
        //var /* jshint unused:false */ modalInstance = 
        $uibModal.open({
            templateUrl: 'src/common/templates/http-callback.html',
            controller: 'HttpDialogController',
            controllerAs:'httpCtrl',
            backdrop:false,
            windowClass: 'center-modal',
            resolve: {
                params: function() {
                    return { 
                        message: message,
                        isSuccess: isSuccess
                    };
                }
            }
        });
        
    }

    function constructFileRequest(resource, data, params) {
        return {
            method: 'POST',
            url: baseUrl + resource,
            headers: { 'Content-Type': undefined },
            transformRequest: function(data) {
                var formData = new FormData();
                var columns = Object.keys(data);
                for(var i=0; i<columns.length; i++) {
                    formData.append(columns[i], data[columns[i]]);
                }
                return formData;
            },
            data: data,
            params:params
        };
    }

    function processDataForChart(data) {
        $log.debug('graph data',data);
        var info = [];
        //labels
        var labels = Object.keys(data);
        info.push(labels);
        labels.sort();
        //label data
        var labelData = [];
        for(var i=0; i<labels.length; i++){
            labelData.push(data[labels[i]]);
        }
        info.push(labelData);
        return info;
    }

    function drawBarChart(data, options, label, elementId) {
        if(!data) {
            return null;
        }
        var info = processDataForChart(data);
        var context = document.getElementById(elementId).getContext('2d');
        //context.clearRect(0,0, 230, 230);
        var barThickness = 30;
        var totalEntries = Object.keys(data).length;
        if(totalEntries>=10 && totalEntries < 12) {
            barThickness = 25;
        }else if(totalEntries >=12 && totalEntries < 15) {
            barThickness = 20;
        }
        else if(totalEntries > 15) {
            barThickness = 10;
        }
        var opt = {
            title:{
                display:true,
                text:options.titleText || 'Title',
                padding:25
            },
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: options.yLabel || 'Y Label'
                    },
                    ticks: {
                        beginAtZero:true
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: options.xLabel || 'X Label'
                    },
                    ticks: {
                        beginAtZero:true

                    },
                    barThickness:barThickness
                }]
            },
            legend:{
                display:true,
                position:'bottom',
                onClick:null
            },
            animation: {
                onComplete: function(){
                    context.font = /* jshint undef:false*/Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
                    context.fillStyle = this.chart.config.options.defaultFontColor;
                    context.textAlign = 'center';
                    context.textBaseline = 'bottom';
                    this.data.datasets.forEach(function (dataset) {
                        for (var i = 0; i < dataset.data.length; i++) {
                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
                            context.fillText(dataset.data[i], model.x-1, model.y - 5);
                        }
                    });
                }
            }
        };
        /* jshint undef:false*/
        return new Chart(context, {
            type: 'bar',
            data: {
                labels: info[0],
                datasets: [{
                    label: label,
                    data: info[1],
                    backgroundColor: 'rgba(66,139,202,1)'
                }]
            },
            options: opt
        });

    }

  

    function exportToExcel(data, query) {
       var options = {
        headers: true,
        sheetid: 'users',
        column: {style:{Font:{Bold:'1'}}},
        rows: {1:{style:{Font:{Color:'#FF0077'}}}},
        cells: {1:{1:{
            style: {Font:{Color:'#00FFFF'}}
        }}}
    };
    /* jshint ignore:start */
    alasql(query, [options, data]);
       
        /* jshint ignore:end */
    }
    
    var service = {
        $broadcast: $broadcast,
        $rootScope: $rootScope,
        $q: $q,
        $window: $window,
        broadcastErrorDialogEvent: broadcastErrorDialogEvent,
        activateParentController: activateParentController,
        activateController: activateController,
        $interval: $interval,
        $timeout: $timeout,
        $location: $location,
        $uibModal: $uibModal,
        $log: $log,
        $http: $http,
        apiBaseUrl: apiBaseUrl,
        baseUrl: baseUrl,
        assetBaseUrl: '/assets/',
        htmlBaseUrl: '/src/',
        yesNoDialog: yesNoDialog,
        alertDialog: alertDialog,
        httpDialog: httpDialog,
        drawBarChart: drawBarChart,
        constructFileRequest: constructFileRequest,
        exportToExcel:exportToExcel,
        uiGridConstants:uiGridConstants
    };

    return service;
}

commonService.$inject = ['$rootScope', '$q', '$window',
'commonConfig', '$timeout', '$interval', 
'$location', '$uibModal', '$log', '$http','uiGridConstants'];

module.exports = commonService;
},{"angular":undefined}],9:[function(require,module,exports){
'use strict';

function httpDialogController($uibModalInstance, params) {

	/*jshint validthis:true*/
	var dialogCtrl = this;

	dialogCtrl.successMsg = 'Data Saved Successfully !';
	dialogCtrl.failureMsg = 'Data failed to save, please try again !';
	dialogCtrl.isSuccess = params.isSuccess;
	
	if(params.isSuccess) {
		dialogCtrl.message = params.message || dialogCtrl.successMsg;
		dialogCtrl.classType = 'success';
	}else{
		dialogCtrl.message = params.message || dialogCtrl.failureMsg;
		dialogCtrl.classType = 'danger';
	}
	
	dialogCtrl.closeAlert = function() {
		$uibModalInstance.dismiss();
	};

	setTimeout(function(){
    	$uibModalInstance.close();
    }, 1500);
}

httpDialogController.$inject = ['$uibModalInstance', 'params'];

module.exports = httpDialogController;
},{}],10:[function(require,module,exports){
'use strict';

var angular = require('angular');

var common = angular.module('common', []);

common.provider('commonConfig', [ function() {
	this.config = {};
	this.$get = function() {
		return {
			config: this.config
		};
	};
}] );

//Directives
common.directive('sepSpinner', require('./spinner.directive'));

//Services
common.factory('commonService', require('./commonService.service'));
common.service('spinner', require('./spinner.service'));

//Components

//Controllers
common.controller('YesNoDialogController', require('./yes-no-dialog.controller'));
common.controller('AlertDialogController', require('./alert-dialog.controller'));
common.controller('HttpDialogController', require('./http-dialog.controller'));

//Filters

module.exports = common;
},{"./alert-dialog.controller":7,"./commonService.service":8,"./http-dialog.controller":9,"./spinner.directive":11,"./spinner.service":12,"./yes-no-dialog.controller":13,"angular":undefined}],11:[function(require,module,exports){
'use strict';

function spinner($window) {
    
    function link(scope, element, attrs) {
        scope.spinner = null;
        scope.$watch(attrs.sepSpinner, function (options) {
            options.radius = 15;
            options.width = 15;
            if (scope.spinner) {
                scope.spinner.stop();
            }
            scope.spinner = new $window.Spinner(options);
            scope.spinner.spin(element[0]);
        }, true);
    }

    var directive = {
        link: link,
        restrict: 'A'
    };
    
    return directive;
    
}

spinner.$inject = ['$window'];

module.exports = spinner;
},{}],12:[function(require,module,exports){
'use strict';

function spinnerService(commonService, commonConfig) {
	
	function spinnerToggle(show) {
        commonService.$broadcast(commonConfig.config.spinnerToggleEvent, {show: show});
    }

	function spinnerHide() {
        spinnerToggle(false);
    }
    
    function spinnerShow() {
        spinnerToggle(true);
    }

    return {
    	spinnerHide: spinnerHide,
    	spinnerShow: spinnerShow
    };
    
}

spinnerService.$inject = ['commonService', 'commonConfig'];

module.exports = spinnerService;
},{}],13:[function(require,module,exports){
'use strict';

function yesNoDialogController($uibModalInstance, params) {

	/*jshint validthis:true*/
	var yesNoCtrl = this;
	
	yesNoCtrl.title = params.title || 'Confirm ?';
	yesNoCtrl.yesTitle = params.yesTitle || 'YES';
	yesNoCtrl.noTitle = params.noTitle || 'NO';
	yesNoCtrl.message = params.message || 'Please Confirm !';

	yesNoCtrl.yes = function () {
        $uibModalInstance.close();
    };

    yesNoCtrl.no = function () {
        $uibModalInstance.dismiss('cancel');
    };

}

yesNoDialogController.$inject = ['$uibModalInstance', 'params'];

module.exports = yesNoDialogController;
},{}],14:[function(require,module,exports){
'use strict';

var angular = require('angular');

function containerController($scope, $rootScope, config, $uibModal, commonService) {
    
    var $log = commonService.$log.getInstance('ContainerController');

    /*jshint validthis:true*/
    var containerCtrl = this;
    var events = config.events;
    
    containerCtrl.isBusy = false;
    containerCtrl.showError = false;

    
    function activate() {
        commonService.activateParentController([], 'ContainerController').then(function() {
            
        }, function() {

        });
    }

    activate();
    
    containerCtrl.spinnerOptions = {
        radius: 40,
        lines: 7,
        length: 0,
        width: 30,
        speed: 1.7,
        corners: 1.0,
        trail: 100,
        color: '#5a91cc'
    };

    function toggleSpinner(on) {
        if(!containerCtrl.showError) {
            containerCtrl.isBusy = on;
        }
    }

    function captureInner(error) {
        var errorString = 'Error: ' + error.class + ' ' + error.data + ' ' + error.error + ' ' + error.location + '\n';
        if (error.stack) {
            errorString = errorString + 'Call Stack:\n';
            for (var i = error.stack.length - 1; i >= 0; --i) {
                var s = error.stack[i];
                errorString = errorString + '' + i + ':' + s.error + ', place:' + s.place + ',mcode:' + s.mcode + '\n';
            }
        }
        if (error.inner) {
            errorString = errorString + captureInner(error.inner);
        }
        return errorString;
    }

    function showError(data) {
        containerCtrl.showError = true;
        containerCtrl.isBusy = false;
        toggleSpinner(false);
        var errorMessage = '';
        if (data.exception) {
            var exc = data.exception;
            if (exc.config) {
                if (exc.status) {
                    errorMessage = errorMessage + 'Command:' + exc.status + ' ' + exc.statusText + ' ' + exc.config.url + '\n';
                    if (exc.status === 500) {
                        if (exc.data && exc.data.class) {
                            var error = exc.data; // cache error
                            errorMessage = errorMessage + captureInner(error);
                        }
                    }
                }
            }
        }
        // else if (data.data){
        //     errorMessage = angular.toJson(data.data);
        // } else {
        //     errorMessage = angular.toJson(data);
        // }
        if (!errorMessage && (data.exception && (typeof data.exception === 'string'))) {
            errorMessage = data.exception;
        }
        var stackTrace = data && data.exception ? data.exception.stack : '';
        //if(stackTrace || errorMessage) {
        //    var modalInstance = $uibModal.open({
        //        templateUrl: '/src/home/templates/error-dialog.html',
        //        controller: 'ErrorDialogController',
        //        controllerAs:'errorDialogCtrl',
        //        resolve: {
        //            params: function() {
        //                return { errorMessage: errorMessage, stackTrace: stackTrace };
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function() {
        //        containerCtrl.showError = false;
        //    }, function() {
        //        containerCtrl.showError = false;
        //    });
        //}
        containerCtrl.showError = false;
    }

    $rootScope.$on('$stateChangeStart', function(event, toState,  /*jshint unused:false*/ toParams,  /*jshint unused:false*/ fromState,  /*jshint unused:false*/ fromParams) {
        $log.debug('Route Changed from ', fromState.url,  '->',  toState.url);
        if(toState.url.indexOf('/footer/') === -1 && toState.url.indexOf('training-checklist') === -1) {
            toggleSpinner(true); 
        }
    });

    $rootScope.$on('$stateChangeSuccess', function(event, toState,  /*jshint unused:false*/ toParams,  /*jshint unused:false*/ fromState,  /*jshint unused:false*/ fromParams){
        containerCtrl.breadcrumbs=toState.breadcrumbs;
        commonService.$window.document.title = 'LMS: ' + toState.title;
        
    });

    $rootScope.$on(events.showErrorDialog, function (event, data) {
        showError(data);
    });

	$rootScope.$on(events.spinnerToggle, function (event, data) {
        toggleSpinner(data.show);
    });

    $rootScope.$on(events.activateController, function (event, data) {
            $log.debug(data.controllerId + ' Controller Activated');
            toggleSpinner(false);
        }
    );

    $rootScope.$on(events.activateParentController, function (event, data) {
            $log.debug(data.controllerId + 'Parent Controller Activated');
            toggleSpinner(false);
        }
    );

    $rootScope.$on(events.activateControllerFailed, function(event, data) {
            toggleSpinner(false);
            showError(data);
            $log.debug(data.controllerId + 'Controller Activation Failed');
        }
    );
}

containerController.$inject = ['$scope', '$rootScope', 'config', '$uibModal', 'commonService',];

module.exports = {
    templateUrl: '/src/home/templates/container.html',
    controllerAs: 'containerCtrl',
    controller: containerController,
    bindings: {
        breadcrumb: '<'
    }
};
},{"angular":undefined}],15:[function(require,module,exports){
'use strict';

function errorDialogController($uibModalInstance, params) {
    
    /*jshint validthis:true */
    var self = this;
    
    self.text = params.errorMessage;
    
    if (params.stackTrace) {
        self.text = self.text + '\n' + params.stackTrace;
    }
    
    self.errorMessage = params.errorMessage;
    self.stackTrace = params.stackTrace;
    
    self.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}

errorDialogController.$inject = ['$uibModalInstance', 'params'];

module.exports = errorDialogController;
},{}],16:[function(require,module,exports){
'use strict';

function loginController(commonService) {
    commonService.activateController([], 'loginController');
}

loginController.$inject = ['commonService'];

module.exports = {
    templateUrl: '/src/home/templates/login.html',
    controllerAs: 'lgnCtrl',
    controller: loginController
};


},{}],17:[function(require,module,exports){
'use strict';

var angular = require('angular');

var home = angular.module('home', []);

home

	.component('appContainer', require('./container.component'))
    .component('login', require('./login.component'))


//controllers
.controller('ErrorDialogController', require('./error-dialog.controller'));
	
module.exports = home;
},{"./container.component":14,"./error-dialog.controller":15,"./login.component":16,"angular":undefined}]},{},[4])
//# sourceMappingURL=bundle.js.map
